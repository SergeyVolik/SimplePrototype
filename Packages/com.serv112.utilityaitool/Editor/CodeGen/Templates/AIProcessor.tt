<#@ template hostspecific="true" language="C#/Unity" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="SerV112.UtilityAIEditor" #>
<#

var settingsJson = this.Host.ResolveParameterValue("-", "-", "settings");

var settings = JsonConvert.DeserializeObject<CreateAIProcessorSettings>(settingsJson);

#>
//-----------------------------------------------------------------------
// This file is AUTO-GENERATED.
// Changes for this script by hand might be lost when auto-generation is run.
// (Generated date: <#=DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss")#>)
//-----------------------------------------------------------------------

using UnityEngine;
using SerV112.UtilityAIRuntime;
using UnityEngine.Events;

<# // create struct with namespace#>
<# if(settings.IsNamespace()) {#>
namespace <#= settings.Namespace #>
{
	<#=settings.GetAttributs()#>
	public class  <#= settings.Name #> <#=  settings.GetInterfacesString() #>
	{
		private bool HasChanges = true;

<# for(var i = 0; i < settings.ActionPartsOfCode.Count; i++) { #>
        public <#= settings.ActionPartsOfCode[i].EnumType #> <#= settings.ActionPartsOfCode[i].Name #> => m_<#= settings.ActionPartsOfCode[i].Name #>;
        [SerializeField]
        private <#= settings.ActionPartsOfCode[i].EnumType #> m_<#= settings.ActionPartsOfCode[i].Name #>;
        [SerializeField]
        private UnityEvent<<#= settings.ActionPartsOfCode[i].EnumType #>> m_Event<#= settings.ActionPartsOfCode[i].Name #> = new UnityEvent<<#= settings.ActionPartsOfCode[i].EnumType #>>();
        public UnityEvent<<#= settings.ActionPartsOfCode[i].EnumType #>> Event<#= settings.ActionPartsOfCode[i].Name #> => m_Event<#= settings.ActionPartsOfCode[i].Name #>;
<# } #>

<# for(var i = 0; i < settings.PropertyPartsOfCode.Count; i++) { #>
        private const string <#= settings.PropertyPartsOfCode[i].Name #>Const = "<#= settings.PropertyPartsOfCode[i].Name #>";
        [SerializeField]
        [Range(<#= settings.PropertyPartsOfCode[i].RageAttribut.Min #>, <#= settings.PropertyPartsOfCode[i].RageAttribut.Max #>)]
        private float m_<#= settings.PropertyPartsOfCode[i].Name #>;
        public float <#= settings.PropertyPartsOfCode[i].Name #> {
            set
            {
                SetProperty(<#= settings.PropertyPartsOfCode[i].Name #>Const, value);
                HasChanges = true;
                m_<#= settings.PropertyPartsOfCode[i].Name #> = value;
            }
            get => GetProperty(<#= settings.PropertyPartsOfCode[i].Name #>Const);
        }
<# } #>

		bool Awaked = false;
        protected override void Awake()
        {
            base.Awake();

<# for(var i = 0; i < settings.PropertyPartsOfCode.Count; i++) { #>
            <#= settings.PropertyPartsOfCode[i].Name #> = m_<#= settings.PropertyPartsOfCode[i].Name #>;
<# } #>
            Awaked = true;
        }


#if UNITY_EDITOR
        private void OnValidate()
        {
            if (Application.isPlaying && Awaked)
            {
<# for(var i = 0; i < settings.PropertyPartsOfCode.Count; i++) { #>
                <#= settings.PropertyPartsOfCode[i].Name #> = m_<#= settings.PropertyPartsOfCode[i].Name #>;
<# } #>

            }
        }
#endif

        private void LateUpdate()
        {
            if (HasChanges)
            {
                
<# for(var i = 0; i < settings.ActionPartsOfCode.Count; i++) { #>
                var  <#= settings.ActionPartsOfCode[i].Name #>1 = (<#= settings.ActionPartsOfCode[i].EnumType #>)Execute(<#=i#>);
                if (<#= settings.ActionPartsOfCode[i].Name #>1 != m_<#= settings.ActionPartsOfCode[i].Name #>)
                {
                    m_<#= settings.ActionPartsOfCode[i].Name #> = <#= settings.ActionPartsOfCode[i].Name #>1;
                    Event<#= settings.ActionPartsOfCode[i].Name #>.Invoke(m_<#= settings.ActionPartsOfCode[i].Name #>);
               
                }
 <# } #>

                HasChanges = false;

            }
        }


	}
}
<#}#>
<# // create struct without namespace#>
<#else {#>

<#=settings.GetAttributs()#>
public class  <#= settings.Name #> <#=  settings.GetInterfacesString() #>
{
	private bool HasChanges = true;

<# for(var i = 0; i < settings.ActionPartsOfCode.Count; i++) { #>
    public <#= settings.ActionPartsOfCode[i].EnumType #> <#= settings.ActionPartsOfCode[i].Name #> => m_<#= settings.ActionPartsOfCode[i].Name #>;
    [SerializeField]
    private <#= settings.ActionPartsOfCode[i].EnumType #> m_<#= settings.ActionPartsOfCode[i].Name #>;
    [SerializeField]
    private UnityEvent<<#= settings.ActionPartsOfCode[i].EnumType #>> m_Event<#= settings.ActionPartsOfCode[i].Name #> = new UnityEvent<<#= settings.ActionPartsOfCode[i].EnumType #>>();
    public UnityEvent<<#= settings.ActionPartsOfCode[i].EnumType #>> Event<#= settings.ActionPartsOfCode[i].Name #> => m_Event<#= settings.ActionPartsOfCode[i].Name #>;
<# } #>

<# for(var i = 0; i < settings.PropertyPartsOfCode.Count; i++) { #>
    private const string <#= settings.PropertyPartsOfCode[i].Name #>Const = "<#= settings.PropertyPartsOfCode[i].Name #>";
    [SerializeField]
    [Range(<#= settings.PropertyPartsOfCode[i].RageAttribut.Min #>, <#= settings.PropertyPartsOfCode[i].RageAttribut.Max #>)]
    private float m_<#= settings.PropertyPartsOfCode[i].Name #>;
    public float <#= settings.PropertyPartsOfCode[i].Name #> {
        set
        {
            SetProperty(<#= settings.PropertyPartsOfCode[i].Name #>Const, value);
            HasChanges = true;
            m_<#= settings.PropertyPartsOfCode[i].Name #> = value;
        }
        get => GetProperty(<#= settings.PropertyPartsOfCode[i].Name #>Const);
    }
<# } #>

	bool Awaked = false;
    protected override void Awake()
    {
        base.Awake();

<# for(var i = 0; i < settings.PropertyPartsOfCode.Count; i++) { #>
        <#= settings.PropertyPartsOfCode[i].Name #> = m_<#= settings.PropertyPartsOfCode[i].Name #>;
<# } #>

        Awaked = true;
    }


#if UNITY_EDITOR
    private void OnValidate()
    {
        if (Application.isPlaying && Awaked)
        {
<# for(var i = 0; i < settings.PropertyPartsOfCode.Count; i++) { #>
            <#= settings.PropertyPartsOfCode[i].Name #> = m_<#= settings.PropertyPartsOfCode[i].Name #>;
<# } #>

        }
    }
#endif

    private void LateUpdate()
    {
        if (HasChanges)
        {
<# for(var i = 0; i < settings.ActionPartsOfCode.Count; i++) { #>
            var  <#= settings.ActionPartsOfCode[i].Name #>1 = (<#= settings.ActionPartsOfCode[i].EnumType #>)Execute(<#=i#>);
            if (<#= settings.ActionPartsOfCode[i].Name #>1 != m_<#= settings.ActionPartsOfCode[i].Name #>)
            {
                m_<#= settings.ActionPartsOfCode[i].Name #> = <#= settings.ActionPartsOfCode[i].Name #>1;
                Event<#= settings.ActionPartsOfCode[i].Name #>.Invoke(m_<#= settings.ActionPartsOfCode[i].Name #>);
               
            }
 <# } #>
            HasChanges = false;

        }
    }
}

<#}#>
	



